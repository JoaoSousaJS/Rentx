// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-arm64-openssl-1.1.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Cars        Cars[]
}

model Specifications {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  description          String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  SpecificationsOnCars SpecificationsOnCars[]
}

model Users {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  password      String
  email         String   @unique
  driverLicense String   @map("driver_license")
  isAdmin       Boolean  @default(false) @map("is_admin")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  avatar        String?
}

model Cars {
  id           String   @id @default(uuid())
  name         String   @unique
  description  String
  dailyRate    Int      @map("daily_rate")
  available    Boolean  @default(true)
  licensePlate String   @unique @map("license_plate")
  fineAmount   Int      @map("fine_amount")
  brand        String
  categoryId   String   @map("category_id")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Categories           Categories             @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  SpecificationsOnCars SpecificationsOnCars[]
}

model SpecificationsOnCars {
  specifications  Specifications @relation(fields: [specificationId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  specificationId String         @map("specification_id")
  cars            Cars           @relation(fields: [carId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  carId           String         @map("car_id")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt


  @@id([carId, specificationId])
}
